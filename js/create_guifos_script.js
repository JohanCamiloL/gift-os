let recorder; // Global variable to start and stop recording gif.
let blob; // Global variable to set and manage the blob generated by RecordRTC
let gifLocalUrl;
const UPLOAD_URL = 'https://upload.giphy.com/v1/gifs';

/**
 * This function sets the HTML element content.
 * @param {string} id The HTML id element
 * @param {string} content The new content.
 */
const changeElementContent = (id, content) => {
  document.getElementById(id).innerText = content;
};

/**
 * Starts the stream Promise
 */
const startStream = () => navigator.mediaDevices.getUserMedia({ video: true });

/**
 * This function turns on the web cam.
 */
const showWebCamVideo = () => {
  startStream()
    .then((mediaStream) => {
      const video = document.querySelector('video');
      video.srcObject = mediaStream;
      video.onloadedmetadata = () => { video.play(); };
    })
    .catch((error) => new Error(`${error.name}:${error.message}`));
};

/**
 * This object creates a nuew RecordRTC object that allow us to capture
 * video as gif.
 */
const createRecorderRTCObject = (stream) => new RecordRTC(stream,
  {
    type: 'gif',
    frameRate: 1,
    quality: 10,
    width: 360,
    hidden: 240,
    onGifRecordingStarted() {
      console.log('Recording started');
    },
  });

/**
 * This function starts the recording Promise to capture video through web cam.
 */
const startRecording = async () => {
  const stream = await startStream();
  recorder = createRecorderRTCObject(stream);
  recorder.startRecording();
};

/**
 * Updates element content.
 * @param {String} elemId
 * @param {Number} value
 */
const update = (elemId, value) => {
  const elem = document.getElementById(elemId);
  elem.textContent = `${value}`.length === 1 ? `0${value}` : value;
};

let interval;

/**
 * This function starts the timer on record section.
 */
const startTimer = () => {
  let minutes = 0;
  let seconds = 0;
  update('minutes', 0);
  update('seconds', 0);

  interval = setInterval(() => {
    if (seconds === 59) {
      seconds = 0;
      minutes += 1;
      minutes = minutes === 60 ? 0 : minutes;
      update('minutes', minutes);
    }
    seconds += 1;
    update('seconds', seconds);
  }, 1000);
};

/**
 * This function stops capturing the gif video.
 */
const stopRecording = () => {
  recorder.stopRecording(() => {
    blob = recorder.getBlob();
    gifLocalUrl = URL.createObjectURL(blob);
    document.getElementById('gif-preview').setAttribute('src', gifLocalUrl);
    document.getElementById('gif-preview').style.display = 'block';
  });
  clearInterval(interval);
  document.getElementById('recording-counter-fixed').textContent = document.querySelector('.recording-counter').textContent;
};

/**
 * This loads all necessary stuff on create_guifos page.
 */
const onLoadCreateGuifos = () => {
  changeTheme(getActualThemeFromLS());
  setDisabledState('back-arrow', 'block');
  showWebCamVideo();
};

/**
 * This function attempts to upload a gif to Giphy through its API.
 */
const uploadGuifo = () => {
  const form = new FormData();
  form.append('file', blob, 'myGig.jpg');
  fetch(`${UPLOAD_URL}?api_key=sOVe2WHH24F3yDpkJH5gNryTxaEt4CmN`, {
    method: 'POST',
    body: form,
  })
    .then((response) => response.json())
    .then((response) => {
      if (!window.localStorage.getItem('gifs')) {
        window.localStorage.setItem('gifs', '{"gifs":[]}');
      }

      const localStorageGifs = JSON.parse(window.localStorage.getItem('gifs'));
      localStorageGifs.gifs.push(response.data.id);
      window.localStorage.setItem('gifs', JSON.stringify(localStorageGifs));
      console.log(response);
      document.getElementById('div-video').style.display = 'none';
      document.getElementById('cancel-uploading').style.display = 'none';
      document.getElementById('guifo-uploaded').style.display = 'grid';
      document.querySelector('#guifo-uploaded img').setAttribute('src', gifLocalUrl);

      addButtonsListenerOnGifUploaded(response.data.id);

      blob = null;
    })
    .catch((error) => {
      console.log(`Error uploading the gif: ${error}`);
    });
};

/**
 * This adds listeners to buttons when gif creates is uploaded.
 * @param {string} gifId uploaded ID gif.
 */
const addButtonsListenerOnGifUploaded = (gifId) => {
  const URL = `https://giphy.com/embed/${gifId}`;
  document.getElementById('copy-gif-url').addEventListener('click', () => {
    prompt('Copiar url: Ctrl + C, Enter', URL);
  });

  document.getElementById('download-gif').addEventListener('click', () => {
    window.open(URL);
  });
}

document.getElementById('back-arrow').addEventListener('click', () => {
  window.location.href = './mis_guifos.html';
});

[...document.getElementsByClassName('page-logo')].forEach((elem) => {
  elem.addEventListener('click', () => {
    window.location.href = './';
  });
});

[...document.getElementsByClassName('record')].forEach((elem) => {
  elem.addEventListener('click', () => {
    document.getElementById('stop-recording-section').style.display = 'grid';
    document.getElementById('recording-buttons').style.display = 'none';
    changeElementContent('rec-guifo-title', 'Capturando Tu Guifo');
    startTimer();
    startRecording();
  });
});

[...document.getElementsByClassName('stop-record')].forEach((elem) => {
  elem.addEventListener('click', () => {
    document.getElementById('stop-recording-section').style.display = 'none';
    document.getElementById('gif-recorded-section').style.display = 'grid';
    document.querySelector('#div-video video').style.display = 'none';
    document.getElementById('gif-preview').style.display = 'block';
    changeElementContent('rec-guifo-title', 'Vista Previa');
    stopRecording();
  });
});

document.getElementById('save-guifo-button')
  .addEventListener('click', () => {
    document.querySelector('video').style.display = 'none';
    document.getElementById('uploading-guifo-section').style.display = 'grid';
    changeElementContent('rec-guifo-title', 'Subiendo Guifo');
    document.getElementById('gif-recorded-section').style.display = 'none';
    document.getElementById('cancel-uploading').style.display = 'block';
    document.getElementById('gif-preview').style.display = 'none';
    uploadGuifo();
  });

document.getElementById('restart-recording-button')
  .addEventListener('click', () => {
    recorder = null;
    blob = null;
    document.getElementById('gif-recorded-section').style.display = 'none';
    document.getElementById('recording-buttons').style.display = 'grid';
    document.querySelector('#div-video video').style.display = 'block';
    document.getElementById('gif-preview').style.display = 'none';
    changeElementContent('rec-guifo-title', 'Un Chequeo Antes de Empezar');
  });

document.getElementById('uploaded-done-button').addEventListener('click', () => {
  window.location.href = './mis_guifos.html';
});
